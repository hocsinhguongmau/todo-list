{"version":3,"sources":["hoc/Ax/Ax.js","components/Title/Title.js","components/AddTodo/AddTodo.js","components/TodoRow/TodoRow.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Ax","props","children","Title","className","tasks","filter","task","done","length","SmallTitle","type","checked","showCompleted","onChange","toggled","AddTodo","action","onSubmit","submitted","changed","value","values","TodoRow","items","deleteBtn","onClick","deleted","Layout","state","newTask","dataHandler","sessionStorage","setItem","JSON","stringify","checkboxHandler","todo","setState","map","item","todoDeleteHandler","updatedTasks","inputTaskHandler","event","target","addTaskHandler","e","preventDefault","find","toggleCompletedHandler","componentDidMount","data","getItem","parse","this","key","index","Component","App","Boolean","window","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb11ef44.chunk.js","sourcesContent":["const Ax = props => props.children;\r\nexport default Ax;\r\n","import React from \"react\";\r\n\r\nconst Title = props => {\r\n\treturn (\r\n\t\t<h1 className=\"Title\">\r\n\t\t\tTodo list ({props.tasks.filter(task => !task.done).length}{\" \"}\r\n\t\t\t{props.tasks.filter(task => !task.done).length > 1\r\n\t\t\t\t? \"items\"\r\n\t\t\t\t: \"item\"}{\" \"}\r\n\t\t\tto do)\r\n\t\t</h1>\r\n\t);\r\n};\r\n\r\nconst SmallTitle = props => {\r\n\treturn (\r\n\t\t<p className=\"SmallTitle\">\r\n\t\t\t<input\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={props.showCompleted}\r\n\t\t\t\tonChange={props.toggled}\r\n\t\t\t/>\r\n\t\t\tShow completed tasks\r\n\t\t</p>\r\n\t);\r\n};\r\nexport {Title, SmallTitle};\r\n","import React from \"react\";\r\n\r\nconst AddTodo = props => {\r\n\treturn (\r\n\t\t<div className=\"AddTodo\">\r\n\t\t\t<form action=\"\" onSubmit={props.submitted}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={props.changed}\r\n\t\t\t\t\tvalue={props.values}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\">Add</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nconst TodoRow = props => {\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t<td>{props.items.action}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\tonChange={() => props.checked(props.items)}\r\n\t\t\t\t\tchecked={props.items.done}\r\n\t\t\t\t/>\r\n\t\t\t</td>\r\n\r\n\t\t\t{props.deleteBtn && (\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"Delete\"\r\n\t\t\t\t\t\tonClick={() => props.deleted(props.items)}\r\n\t\t\t\t\t></button>\r\n\t\t\t\t</td>\r\n\t\t\t)}\r\n\t\t</tr>\r\n\t);\r\n};\r\nexport default TodoRow;\r\n","import React, {Component} from \"react\";\r\nimport Ax from \"../Ax/Ax\";\r\nimport {Title, SmallTitle} from \"../../components/Title/Title\";\r\nimport AddTodo from \"../../components/AddTodo/AddTodo\";\r\nimport TodoRow from \"../../components/TodoRow/TodoRow\";\r\n\r\nclass Layout extends Component {\r\n\tstate = {\r\n\t\ttasks: [\r\n\t\t\t{action: \"Buy flowers\", done: true},\r\n\t\t\t{action: \"Doing homework\", done: true},\r\n\t\t\t{action: \"Cleaning\", done: false},\r\n\t\t\t{action: \"Laundry\", done: false},\r\n\t\t\t{action: \"Sleep\", done: false}\r\n\t\t],\r\n\t\tnewTask: \"\",\r\n\t\tshowCompleted: true\r\n\t};\r\n\r\n\tdataHandler = () =>\r\n\t\tsessionStorage.setItem(\"todos\", JSON.stringify(this.state));\r\n\r\n\tcheckboxHandler = todo => {\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\ttasks: this.state.tasks.map(item =>\r\n\t\t\t\t\titem.action === todo.action\r\n\t\t\t\t\t\t? {...item, done: !item.done}\r\n\t\t\t\t\t\t: item\r\n\t\t\t\t)\r\n\t\t\t},\r\n\t\t\tthis.dataHandler\r\n\t\t);\r\n\t};\r\n\r\n\ttodoDeleteHandler = todo => {\r\n\t\tconst updatedTasks = this.state.tasks.filter(\r\n\t\t\titem => item.action !== todo.action\r\n\t\t);\r\n\t\tthis.setState({tasks: updatedTasks}, this.dataHandler);\r\n\t};\r\n\r\n\tinputTaskHandler = event => {\r\n\t\tthis.setState({newTask: event.target.value});\r\n\t};\r\n\r\n\taddTaskHandler = e => {\r\n\t\te.preventDefault();\r\n\t\tif (\r\n\t\t\t!this.state.tasks.find(\r\n\t\t\t\titem => item.action === this.state.newTask\r\n\t\t\t) &&\r\n\t\t\tthis.state.newTask !== \"\"\r\n\t\t) {\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\ttasks: [\r\n\t\t\t\t\t\t...this.state.tasks,\r\n\t\t\t\t\t\t{action: this.state.newTask, done: false}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tnewTask: \"\"\r\n\t\t\t\t},\r\n\t\t\t\tthis.dataHandler\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\ttoggleCompletedHandler = () => {\r\n\t\tthis.setState({showCompleted: !this.state.showCompleted});\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tlet data = sessionStorage.getItem(\"todos\");\r\n\t\tthis.setState(\r\n\t\t\tdata != null\r\n\t\t\t\t? JSON.parse(data)\r\n\t\t\t\t: {\r\n\t\t\t\t\t\ttasks: [\r\n\t\t\t\t\t\t\t{action: \"Buy flowers\", done: true},\r\n\t\t\t\t\t\t\t{action: \"Doing homework\", done: true},\r\n\t\t\t\t\t\t\t{action: \"Cleaning\", done: false},\r\n\t\t\t\t\t\t\t{action: \"Laundry\", done: false},\r\n\t\t\t\t\t\t\t{action: \"Sleep\", done: false}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tnewTask: \"\",\r\n\t\t\t\t\t\tshowCompleted: true\r\n\t\t\t\t  }\r\n\t\t);\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Ax>\r\n\t\t\t\t<Title tasks={this.state.tasks} />\r\n\t\t\t\t<div className=\"Display\">\r\n\t\t\t\t\t<AddTodo\r\n\t\t\t\t\t\tsubmitted={this.addTaskHandler}\r\n\t\t\t\t\t\tchanged={this.inputTaskHandler}\r\n\t\t\t\t\t\tvalues={this.state.newTask}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"List Todo\">\r\n\t\t\t\t\t\t{this.state.tasks.filter(task => !task.done).length >\r\n\t\t\t\t\t\t\t0 && (\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th>Description</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>Done</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>Delete</th>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t{this.state.tasks\r\n\t\t\t\t\t\t\t\t\t\t.filter(item => item.done === false)\r\n\t\t\t\t\t\t\t\t\t\t.map(item => (\r\n\t\t\t\t\t\t\t\t\t\t\t<TodoRow\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={item.action}\r\n\t\t\t\t\t\t\t\t\t\t\t\titems={item}\r\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.checkboxHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeleted={this.todoDeleteHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeleteBtn={true}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<SmallTitle\r\n\t\t\t\t\t\ttoggled={this.toggleCompletedHandler}\r\n\t\t\t\t\t\tshowCompleted={this.state.showCompleted}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{this.state.showCompleted && (\r\n\t\t\t\t\t\t<div className=\"List Completed\">\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th>Description</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>Done</th>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t{this.state.tasks\r\n\t\t\t\t\t\t\t\t\t\t.filter(item => item.done === true)\r\n\t\t\t\t\t\t\t\t\t\t.map((item, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<TodoRow\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={item.action}\r\n\t\t\t\t\t\t\t\t\t\t\t\titems={item}\r\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.checkboxHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeleted={this.todoDeleteHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeleteBtn={false}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</Ax>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Layout from \"./hoc/Layout/Layout\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"typeface-roboto\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}